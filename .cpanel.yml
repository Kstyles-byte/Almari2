deployment:
  tasks:
    # Configure your application directory on the server (must match the Application root in cPanel)
    - export DEPLOY_ROOT="/home/imsfrkmv/Almari2"
    - export DEPLOY_LOG="$HOME/deploy.log"
    - echo "[$(date -u +%FT%TZ)] starting deploy to $DEPLOY_ROOT" >> "$DEPLOY_LOG"

    # Ensure deploy root exists
    - /bin/mkdir -p "$DEPLOY_ROOT"
    - echo "[$(date -u +%FT%TZ)] ensured deploy root" >> "$DEPLOY_LOG"

    # Sync repository files to the application directory (no build artifacts yet)
    - RSYNC_BIN="$(command -v rsync || true)"
    - |
        if [ -n "$RSYNC_BIN" ]; then
          "$RSYNC_BIN" -a --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            --exclude ".next" \
            --exclude ".github" \
            --exclude "cpanel-deploy.sh" \
            --exclude "build-no-swc.sh" \
            ./ "$DEPLOY_ROOT"/
        else
          # Fallback: emulate a sync while preserving .next
          find "$DEPLOY_ROOT" -mindepth 1 -maxdepth 1 \
            -not -name ".next" -exec rm -rf {} + || true
          /bin/cp -a ./ "$DEPLOY_ROOT"/
        fi
    - echo "[$(date -u +%FT%TZ)] synced repo files" >> "$DEPLOY_LOG"

    # If a prebuilt .next exists in the repo (or was uploaded), sync it
    - if [ -d .next ]; then /usr/bin/rsync -a --delete .next/ "$DEPLOY_ROOT"/.next/; fi || true

    # Set safe permissions
    - /bin/chmod -R g+w "$DEPLOY_ROOT" || true

    # Build on the server using the Node.js version configured for this app in cPanel
    - export APP_NAME="$(basename \"$DEPLOY_ROOT\")"
    - export NODE_ENV=production NEXT_TELEMETRY_DISABLED=1 UV_USE_IO_URING=0 CPANEL_BUILD=true DISABLE_MINIFICATION=true
    - export NODE_OPTIONS="${NODE_OPTIONS:---max-old-space-size=512}"
    - export NODEVENV_BASE="$HOME/nodevenv/$APP_NAME"
    - |
        # Discover npm inside cPanel's nodevenv (prefer Node 20, then 18, then highest available)
        if [ -x "$NODEVENV_BASE/20/bin/npm" ]; then
          NPM_BIN="$NODEVENV_BASE/20/bin/npm"
        elif [ -x "$NODEVENV_BASE/18/bin/npm" ]; then
          NPM_BIN="$NODEVENV_BASE/18/bin/npm"
        elif [ -x "$NODEVENV_BASE/bin/npm" ]; then
          NPM_BIN="$NODEVENV_BASE/bin/npm"
        else
          CANDIDATE_NPM=$(ls -d "$NODEVENV_BASE"/*/bin/npm 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$CANDIDATE_NPM" ] && [ -x "$CANDIDATE_NPM" ]; then
            NPM_BIN="$CANDIDATE_NPM"
          else
            NPM_BIN=""
          fi
        fi
        if [ -n "$NPM_BIN" ]; then
          NODE_BIN="$(dirname \"$NPM_BIN\")/node"
        else
          NODE_BIN=""
        fi
    - echo "[$(date -u +%FT%TZ)] nodevenv base: $NODEVENV_BASE" >> "$DEPLOY_LOG"
    - echo "[$(date -u +%FT%TZ)] resolved npm: ${NPM_BIN:-not-found} node: ${NODE_BIN:-not-found}" >> "$DEPLOY_LOG"
    - |
        if [ -n "$NPM_BIN" ] && [ -x "$NPM_BIN" ]; then
          cd "$DEPLOY_ROOT" || exit 1
          echo "[$(date -u +%FT%TZ)] installing deps" >> "$DEPLOY_LOG"
          # Install deps (use ci when lockfile exists)
          if [ -f package-lock.json ]; then
            "$NPM_BIN" ci --no-audit --no-fund --loglevel=error || exit 1
          else
            "$NPM_BIN" install --no-audit --no-fund --loglevel=error || exit 1
          fi
          echo "[$(date -u +%FT%TZ)] building next" >> "$DEPLOY_LOG"
          # Build Next.js (memory-friendly)
          "$NPM_BIN" run build || exit 1
          echo "[$(date -u +%FT%TZ)] build done" >> "$DEPLOY_LOG"
          /bin/mkdir -p "$DEPLOY_ROOT"/logs
          echo "[$(date -u +%FT%TZ)] ensured logs dir" >> "$DEPLOY_LOG"
          /usr/bin/touch "$DEPLOY_ROOT"/.deploy_stamp
          echo "[$(date -u +%FT%TZ)] wrote deploy stamp" >> "$DEPLOY_LOG"
        else
          echo "[$(date -u +%FT%TZ)] WARN: could not resolve npm under $NODEVENV_BASE. Check cPanel Node App settings (App root, Startup file, Node version)." >> "$DEPLOY_LOG"
        fi

    # Touch Passenger restart file to restart the Node app managed by cPanel
    - /bin/mkdir -p "$DEPLOY_ROOT"/tmp && /usr/bin/touch "$DEPLOY_ROOT"/tmp/restart.txt
    - echo "[$(date -u +%FT%TZ)] restart signaled" >> "$DEPLOY_LOG"
