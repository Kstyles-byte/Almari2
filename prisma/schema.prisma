generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------
// ENUMS
// ---------------------------------------------

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
  AGENT
}

// ---------------------------------------------
// CORE AUTH MODELS (NextAuth compatible)
// ---------------------------------------------

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String?      // Nullable because OAuth users may not have a password
  role      UserRole     @default(CUSTOMER)

  accounts  Account[]
  sessions  Session[]
  vendor    Vendor?
  inventoryTransactions InventoryTransaction[]

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------------------------------------------
// E-COMMERCE MODELS (minimal subset)
// ---------------------------------------------

model Vendor {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        String   @id @default(uuid())
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])

  name      String
  inventory Int      @default(0)
  price     Decimal? // optional for minimal compilation

  inventoryTransactions InventoryTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryTransaction {
  id              String   @id @default(uuid())
  productId       String
  product         Product  @relation(fields: [productId], references: [id])

  previousQuantity Int
  newQuantity      Int
  type            String
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  note            String?

  createdAt       DateTime @default(now())
} 