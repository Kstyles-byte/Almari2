// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
  AGENT
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderItemStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}

// New enum for pickup status
enum PickupStatus {
  PENDING
  READY_FOR_PICKUP
  PICKED_UP
}

// New enum for return status
enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COMPLETED
}

// New enum for refund status
enum RefundStatus {
  PENDING
  PROCESSED
  REJECTED
}

// New enum for notification type
enum NotificationType {
  ORDER_STATUS_CHANGE
  PICKUP_READY
  ORDER_PICKED_UP
  RETURN_REQUESTED
  RETURN_APPROVED
  RETURN_REJECTED
  REFUND_PROCESSED
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  customer  Customer?
  vendor    Vendor?
  agent     Agent?
  notifications Notification[]
}

model Customer {
  id        String    @id @default(uuid())
  userId    String    @unique
  phone     String?
  address   String?
  hostel    String?
  room      String?
  college   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  returns   Return[]
}

model Vendor {
  id             String    @id @default(uuid())
  userId         String    @unique
  storeName      String
  description    String?
  logo           String?
  banner         String?
  isApproved     Boolean   @default(false)
  commissionRate Decimal   @default(0)
  bankName       String?
  accountNumber  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]
  orderItems     OrderItem[]
  payouts        Payout[]
  returns        Return[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  icon      String?
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  parent    Category? @relation("SubCategories", fields: [parentId], references: [id])
  children  Category[] @relation("SubCategories")
  products  Product[]
}

model Product {
  id            String    @id @default(uuid())
  vendorId      String
  name          String
  slug          String    @unique
  description   String?
  price         Decimal
  comparePrice  Decimal?
  categoryId    String
  inventory     Int       @default(0)
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  vendor        Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category      Category  @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  returns       Return[]
}

model ProductImage {
  id        String    @id @default(uuid())
  productId String
  url       String
  alt       String?
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id               String        @id @default(uuid())
  customerId       String
  agentId          String?       // New field for agent
  status           OrderStatus   @default(PENDING)
  total            Decimal
  shippingAddress  String?
  paymentStatus    PaymentStatus @default(PENDING)
  paymentReference String?
  pickupCode       String?       // New field for verification
  pickupStatus     PickupStatus  @default(PENDING) // New field for pickup status
  pickupDate       DateTime?     // New field for actual pickup date
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  customer         Customer      @relation(fields: [customerId], references: [id])
  agent            Agent?        @relation(fields: [agentId], references: [id])
  items            OrderItem[]
  returns          Return[]
  notifications    Notification[]
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  productId String
  vendorId  String
  quantity  Int
  price     Decimal
  status    OrderItemStatus @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  vendor    Vendor          @relation(fields: [vendorId], references: [id])
}

model Review {
  id         String    @id @default(uuid())
  customerId String
  productId  String
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id         String     @id @default(uuid())
  customerId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items      CartItem[]
}

model CartItem {
  id        String    @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id])
}

model Payout {
  id        String       @id @default(uuid())
  vendorId  String
  amount    Decimal
  status    PayoutStatus @default(PENDING)
  reference String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  vendor    Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

// New Agent model
model Agent {
  id            String    @id @default(uuid())
  userId        String    @unique
  name          String
  email         String    @unique
  phone         String
  location      String
  operatingHours String?
  capacity      Int       @default(0)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
  returns       Return[]
}

// New Return model
model Return {
  id            String       @id @default(uuid())
  orderId       String
  productId     String
  customerId    String
  vendorId      String
  agentId       String
  reason        String
  status        ReturnStatus @default(REQUESTED)
  refundAmount  Decimal
  refundStatus  RefundStatus @default(PENDING)
  requestDate   DateTime     @default(now())
  processDate   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  order         Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product      @relation(fields: [productId], references: [id])
  customer      Customer     @relation(fields: [customerId], references: [id])
  vendor        Vendor       @relation(fields: [vendorId], references: [id])
  agent         Agent        @relation(fields: [agentId], references: [id])
  notifications Notification[]
}

// New Notification model
model Notification {
  id            String           @id @default(uuid())
  userId        String
  title         String
  message       String
  type          NotificationType
  orderId       String?
  returnId      String?
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())
  
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  order         Order?           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  return        Return?          @relation(fields: [returnId], references: [id], onDelete: Cascade)
}
