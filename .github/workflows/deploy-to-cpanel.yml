name: Deploy to cPanel

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔨 Build Next.js application
      run: npm run build:production
      env:
        NODE_ENV: production
        CPANEL_BUILD: true
        DISABLE_MINIFICATION: true
        NEXT_TELEMETRY_DISABLED: 1
        NODE_OPTIONS: "--max-old-space-size=4096"
        UV_USE_IO_URING: 0
        
    - name: 📁 Create deployment package
      run: |
        mkdir -p deploy-package
        
        # Verify .next folder exists and has content
        if [ ! -d ".next" ] || [ -z "$(ls -A .next)" ]; then
          echo "❌ Error: .next directory is missing or empty!"
          exit 1
        fi
        
        echo "✅ .next directory found with content"
        ls -la .next/
        
        # Copy built .next folder
        cp -r .next deploy-package/
        
        # Copy essential files
        cp package.json deploy-package/
        cp package-lock.json deploy-package/ || echo "No package-lock.json"
        cp server.js deploy-package/
        cp next.config.js deploy-package/
        cp next.config.ts deploy-package/ || echo "No next.config.ts"
        cp tailwind.config.js deploy-package/ || echo "No tailwind.config.js" 
        cp tsconfig.json deploy-package/ || echo "No tsconfig.json"
        cp postcss.config.mjs deploy-package/ || echo "No postcss.config.mjs"
        cp auth.ts deploy-package/ || echo "No auth.ts"
        cp middleware.ts deploy-package/ || echo "No middleware.ts"
        
        # Copy source directories (needed for some Next.js features)
        cp -r app deploy-package/ || echo "No app directory"
        cp -r components deploy-package/ || echo "No components directory"
        cp -r lib deploy-package/ || echo "No lib directory"
        cp -r public deploy-package/ || echo "No public directory"
        cp -r types deploy-package/ || echo "No types directory"
        cp -r actions deploy-package/ || echo "No actions directory"
        cp -r contexts deploy-package/ || echo "No contexts directory"
        cp -r hooks deploy-package/ || echo "No hooks directory"
        cp -r providers deploy-package/ || echo "No providers directory"
        
        # Install production dependencies locally first to ensure compatibility
        echo "🔧 Installing production dependencies..."
        cd deploy-package
        npm install --production --no-dev --prefer-offline
        cd ..
        
        # Create a comprehensive deployment script
        cat > deploy-package/deploy-on-server.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Starting server deployment..."
        
        # Set production environment
        export NODE_ENV=production
        
        # Check Node.js version
        echo "📋 Node.js version: $(node --version)"
        echo "📋 NPM version: $(npm --version)"
        
        # Verify .next directory exists
        if [ ! -d ".next" ]; then
          echo "❌ Error: .next directory not found!"
          exit 1
        fi
        
        # Check if dependencies are already installed
        if [ ! -d "node_modules" ]; then
          echo "📦 Installing production dependencies..."
          npm install --production --prefer-offline --no-optional
        else
          echo "✅ Dependencies already installed"
        fi
        
        # Set proper permissions
        chmod -R 755 .next/
        chmod +x server.js
        
        echo "✅ Deployment complete!"
        echo "🔄 Please restart your Node.js application in cPanel"
        echo "🌐 Your app should be available once restarted"
        EOF
        chmod +x deploy-package/deploy-on-server.sh
        
        # Verify deployment package
        echo "📋 Deployment package contents:"
        ls -la deploy-package/
        
    - name: 📦 Create deployment archive
      run: |
        cd deploy-package
        tar -czf ../deployment.tar.gz .
        cd ..
        ls -la deployment.tar.gz
        
    - name: 🌐 Deploy via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy-package/
        server-dir: /
        
    - name: ✅ Deployment Success
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📋 Next steps:"
        echo "1. Go to cPanel → Terminal"
        echo "2. Run: cd /home/imsfrkmv/Almari2 && bash deploy-on-server.sh"
        echo "3. Restart your Node.js application"